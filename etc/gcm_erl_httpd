# Note: don't use tabs!

Modules mod_alias mod_auth mod_esi
ErlScriptAlias /gcm-demo gcm_erl_httpd
Port 8081
ServerName gcm_http.example.com
ServerRoot /var/log/gcm_erl
DocumentRoot /tmp
BindAddress *
SocketType ip_comm

# This property allows you to disable chunked transfer-encoding when sending a
# response to a HTTP/1.1 client, by default this is false.
#DisableChunkedTransferEncodingSend false

# Instructs the server whether or not to use persistent connections when the
# client claims to be HTTP/1.1 compliant, default is true.
#KeepAlive true

# The number of seconds the server will wait for a subsequent request from the
# client before closing the connection. Default is 150.
#KeepAliveTimeout 150

# Limits the size of the message body of HTTP request. By the default there is
# no limit.
#MaxBodySize integer

# Limits the number of simultaneous requests that can be supported. Defaults to
# 150.
#MaxClients 150

# Limits the size of the message header of HTTP request. Defaults to 10240.
#MaxHeaderSize 10240

# Limits the size of the HTTP request URI. By default there is no limit.
#MaxUri integer

# The number of request that a client can do on one connection. When the server
# has responded to the number of requests defined by max_keep_alive_requests
# the server close the connection. The server will close it even if there are
# queued request. Defaults to no limit.
#MaxKeepAliveRequests integer

# ServerAdmin defines the email-address of the server administrator, to be
# included in any error messages returned by the server.
#ServerAdmin admin@example.com

# ServerTokens defines how the value of the server header should look.
# Example: Assuming the version of inets is 5.8.1, here is what the server
# header string could look like for the different values of server-tokens:
#
# prod                  "inets"
# major                 "inets/5"
# minor                 "inets/5.8"
# minimal               "inets/5.8.1"
# os                    "inets/5.8.1 (unix)"
# full                  "inets/5.8.1 (unix/linux) OTP/R15B"
# {private, "foo/bar"}  "foo/bar"
# By default, the value is as before, which is minimal.
# ServerTokens prod|major|minor|minimal|os|full|{private, string()}
#ServerTokens minimal

# Defines if access logs should be written according to the common log format
# or to the extended common log format. The common format is one line that
# looks like this:
#
#   remotehost rfc931 authuser [date] "request" status bytes
#
# remotehost
#  Remote
# rfc931
#  The client's remote username (RFC 931).
# authuser
#  The username with which the user authenticated
#         himself.
# [date]
#  Date and time of the request (RFC 1123).
# "request"
#  The request line exactly as it came from the client
#         (RFC 1945).
# status
#  The HTTP status code returned to the client
#         (RFC 1945).
# bytes
#  The content-length of the document transferred.
#
# The combined format is one line that looks like this:
#   remotehost rfc931 authuser [date] "request" status bytes "referer" "user_agent"

# "referer"
#  The url the client was on before
#  requesting your url. (If it could not be determined
#  a minus sign will be placed in this field)
# "user_agent"
#  The software the client claims to be using. (If it
#  could not be determined a minus sign will be placed in
#  this field)
#
# This affects the access logs written by mod_log and mod_disk_log.
#LogFormat combined

# ErrorLogFormat, pretty | compact}
# Defaults to pretty. If the error log is meant to be read directly by a human
# pretty will be the best option. pretty has the format corresponding to:
#
# io:format("[~s] ~s, reason: ~n ~p ~n~n", [Date, Msg, Reason]).
#
# compact has the format corresponding to:
#
# io:format("[~s] ~s, reason: ~w ~n", [Date, Msg, Reason]).
#
# This affects the error logs written by mod_log and mod_disk_log.
#
#ErrorLogFormat pretty

# SSL properties

# SslCaCertificateFile /path/to/file
# SslCertificateFile /path/to/file
# SslCiphers list of ciphers
# SslVerifyClient verify_none | verify_peer
# SslVerifyDepth integer
# SslPasswordCallbackFunction functionname
# SslPasswordCallbackArguments arg0 arg1 ...
# SslPasswordCallbackModule modulename

# Log properties - requires mod_log

# Defines the filename of the error log file to be used to log server errors.
# If the filename does not begin with a slash (/) it is assumed to be relative
# to the server_root.
#ErrorLog error.log

# Defines the filename of the access log file to be used to log security
# events. If the filename does not begin with a slash (/) it is assumed to be
# relative to the server_root.
#SecurityLog security.log

# Defines the filename of the access log file to be used to log incoming
# requests. If the filename does not begin with a slash (/) it is assumed to be
# relative to the server_root.
#TransferLog access.log

# Disk Log properties - requires mod_disk_log

# Defines the file-format of the log files see disk_log for more information.
# If the internal file-format is used, the logfile will be repaired after a
# crash. When a log file is repaired data might get lost. When the external
# file-format is used httpd will not start if the log file is broken. Defaults
# to external.
#DiskLogFormat external

# Defines the filename of the (disk_log(3)) error log file to be used to log
# server errors. If the filename does not begin with a slash (/) it is assumed
# to be relative to the server_root.
#ErrorDiskLog error.disk.log

# Where MaxBytes = integer() and MaxFiles = integer(). Defines the properties
# of the (disk_log(3)) error log file. The disk_log(3) error log file is of
# type wrap log and max-bytes will be written to each file and max-files will
# be used before the first file is truncated and reused.
#ErrorDiskLogSize MaxBytes MaxFiles

# Defines the filename of the (disk_log(3)) access log file which logs incoming
# security events i.e authenticated requests. If the filename does not begin
# with a slash (/) it is assumed to be relative to the server_root.
#SecurityDiskLog security.disk.log

# Where MaxBytes = integer() and MaxFiles = integer(). Defines the properties
# of the disk_log(3) access log file. The disk_log(3) access log file is of
# type wrap log and max-bytes will be written to each file and max-files will
# be used before the first file is truncated and reused.
#SecurityDiskLogSize MaxBytes MaxFiles

# Defines the filename of the (disk_log(3)) access log file which logs incoming
# requests. If the filename does not begin with a slash (/) it is assumed to be
# relative to the server_root.
#TransferDiskLog access.disk.log

# Where MaxBytes = integer() and MaxFiles = integer(). Defines the properties
# of the disk_log(3) access log file. The disk_log(3) access log file is of
# type wrap log and max-bytes will be written to each file and max-files will
# be used before the first file is truncated and reused.
#TransferDiskLogSize MaxBytes MaxFiles

# Authentication properties - requires mod_auth
#<Directory Dir>

# Defines a set of hosts which should be granted access to a given directory.
#AllowFrom all | [RegxpHostString]

# Defines a set of hosts which should be denied access to a given directory.
#DenyFrom all | [RegxpHostString]

# Sets the type of authentication database that is used for the directory.The
# key difference between the different methods is that dynamic data can be
# saved when Mnesia and Dets is used. This property is called AuthDbType in the
# Apache like configuration files.
#AuthType plain | dets | mnesia

# Sets the name of a file which contains the list of users and passwords for
# user authentication. filename can be either absolute or relative to the
# server_root. If using the plain storage method, this file is a plain text
# file, where each line contains a user name followed by a colon, followed by
# the non-encrypted password. If user names are duplicated, the behavior is
# undefined.
# If using the dets storage method, the user database is maintained by dets and
# should not be edited by hand. Use the API functions in mod_auth module to
# create / edit the user database. This directive is ignored if using the
# mnesia storage method. For security reasons, make sure that the
# auth_user_file is stored outside the document tree of the Web server. If it
# is placed in the directory which it protects, clients will be able to
# download it.
#AuthUserFile /auth/file/path

# Sets the name of a file which contains the list of user groups for user
# authentication. Filename can be either absolute or relative to the
# server_root. If you use the plain storage method, the group file is a plain
# text file, where each line contains a group name followed by a colon,
# followed by the member user names separated by spaces.
# If using the dets storage method, the group database is maintained by dets
# and should not be edited by hand. Use the API for mod_auth module to create /
# edit the group database. This directive is ignored if using the mnesia
# storage method. For security reasons, make sure that the auth_group_file is
# stored outside the document tree of the Web server. If it is placed in the
# directory which it protects, clients will be able to download it.
#AuthGroupFile /group/file/path

# Sets the name of the authorization realm (auth-domain) for a directory. This
# string informs the client about which user name and password to use.
#AuthName string

# If set to other than "NoPassword" the password is required for all API calls.
# If the password is set to "DummyPassword" the password must be changed before
# any other API calls. To secure the authenticating data the password must be
# changed after the web server is started since it otherwise is written in
# clear text in the configuration file.
#AuthAccessPassword, string()}

# Defines users which should be granted access to a given directory using a
# secret password.
#RequireUser user [user...]

# Defines users which should be granted access to a given directory using a
# secret password.
#RequireGroup group [group...]

#</Directory>

